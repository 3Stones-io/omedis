defmodule Omedis.Repo.Migrations.CreateInvitations do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:invitations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :email, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :language, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :creator_id,
          references(:users,
            column: :id,
            name: "invitations_creator_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :tenant_id,
          references(:tenants,
            column: :id,
            name: "invitations_tenant_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "invitations_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :nilify_all
          )
    end

    create index(:invitations, [:tenant_id])

    create table(:invitation_groups, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :invitation_id,
          references(:invitations,
            column: :id,
            name: "invitation_groups_invitation_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false

      add :group_id,
          references(:groups,
            column: :id,
            name: "invitation_groups_group_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false
    end

    create index(:invitation_groups, [:invitation_id])
    create index(:invitation_groups, [:group_id])
  end

  def down do
    drop constraint(:invitation_groups, "invitation_groups_invitation_id_fkey")

    drop constraint(:invitation_groups, "invitation_groups_group_id_fkey")

    drop table(:invitation_groups)

    drop constraint(:invitations, "invitations_creator_id_fkey")

    drop constraint(:invitations, "invitations_tenant_id_fkey")

    drop constraint(:invitations, "invitations_user_id_fkey")

    drop table(:invitations)
  end
end
