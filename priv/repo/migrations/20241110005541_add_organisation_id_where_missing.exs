defmodule Omedis.Repo.Migrations.AddOrganisationIdWhereMissing do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:tokens) do
      add :organisation_id,
          references(:organisations,
            column: :id,
            name: "tokens_organisation_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    drop_if_exists unique_index(:projects, [:name, :organisation_id],
                     name: "projects_unique_name_index"
                   )

    drop_if_exists unique_index(:projects, [:position, :organisation_id],
                     name: "projects_unique_position_index"
                   )

    create unique_index(:projects, [:organisation_id, :name], name: "projects_unique_name_index")

    create unique_index(:projects, [:organisation_id, :position],
             name: "projects_unique_position_index"
           )

    drop constraint(:log_entries, "log_entries_activity_id_fkey")

    alter table(:log_entries) do
      modify :activity_id,
             references(:activities,
               column: :id,
               name: "log_entries_activity_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    drop constraint(:invitations, "invitations_organisation_id_fkey")

    alter table(:invitations) do
      modify :organisation_id,
             references(:organisations,
               column: :id,
               name: "invitations_organisation_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    drop constraint(:invitation_groups, "invitation_groups_group_id_fkey")

    drop constraint(:invitation_groups, "invitation_groups_invitation_id_fkey")

    alter table(:invitation_groups) do
      add :organisation_id,
          references(:organisations,
            column: :id,
            name: "invitation_groups_organisation_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      modify :invitation_id,
             references(:invitations,
               column: :id,
               name: "invitation_groups_invitation_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :group_id,
             references(:groups,
               column: :id,
               name: "invitation_groups_group_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    alter table(:groups) do
      modify :organisation_id, :uuid, null: false
    end

    drop_if_exists unique_index(:groups, [:slug, :organisation_id],
                     name: "groups_unique_slug_per_organisation_index"
                   )

    create unique_index(:groups, [:organisation_id, :slug],
             name: "groups_unique_slug_per_organisation_index"
           )

    drop constraint(:group_memberships, "group_memberships_group_id_fkey")

    alter table(:group_memberships) do
      add :organisation_id,
          references(:organisations,
            column: :id,
            name: "group_memberships_organisation_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    drop_if_exists unique_index(:group_memberships, [:group_id, :user_id],
                     name: "group_memberships_unique_group_membership_index"
                   )

    alter table(:group_memberships) do
      modify :group_id,
             references(:groups,
               column: :id,
               name: "group_memberships_group_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:group_memberships, [:organisation_id, :group_id, :user_id],
             name: "group_memberships_unique_group_membership_index"
           )

    drop constraint(:activities, "activities_project_id_fkey")

    drop constraint(:activities, "activities_group_id_fkey")

    alter table(:activities) do
      add :organisation_id,
          references(:organisations,
            column: :id,
            name: "activities_organisation_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    drop_if_exists unique_index(:activities, [:color_code, :group_id],
                     name: "activities_unique_color_code_position_index"
                   )

    drop_if_exists unique_index(:activities, [:position, :group_id],
                     name: "activities_unique_position_index"
                   )

    drop_if_exists unique_index(:activities, [:slug, :group_id],
                     name: "activities_unique_slug_index"
                   )

    alter table(:activities) do
      modify :group_id,
             references(:groups,
               column: :id,
               name: "activities_group_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :project_id,
             references(:projects,
               column: :id,
               name: "activities_project_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:activities, [:organisation_id, :color_code, :group_id],
             name: "activities_unique_color_code_position_index"
           )

    create unique_index(:activities, [:organisation_id, :slug, :group_id],
             name: "activities_unique_slug_index"
           )

    create unique_index(:activities, [:organisation_id, :position, :group_id],
             name: "activities_unique_position_index"
           )

    drop constraint(:access_rights, "access_rights_group_id_fkey")

    alter table(:access_rights) do
      modify :organisation_id, :uuid, null: false

      modify :group_id,
             references(:groups,
               column: :id,
               name: "access_rights_group_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end
  end

  def down do
    drop constraint(:access_rights, "access_rights_group_id_fkey")

    alter table(:access_rights) do
      modify :group_id,
             references(:groups,
               column: :id,
               name: "access_rights_group_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :organisation_id, :uuid, null: true
    end

    drop_if_exists unique_index(:activities, [:organisation_id, :slug, :group_id],
                     name: "activities_unique_slug_index"
                   )

    drop_if_exists unique_index(:activities, [:organisation_id, :position, :group_id],
                     name: "activities_unique_position_index"
                   )

    create unique_index(:activities, [:position, :group_id],
             name: "activities_unique_position_index"
           )

    drop_if_exists unique_index(:activities, [:organisation_id, :color_code, :group_id],
                     name: "activities_unique_color_code_position_index"
                   )

    drop constraint(:activities, "activities_organisation_id_fkey")

    drop constraint(:activities, "activities_group_id_fkey")

    drop constraint(:activities, "activities_project_id_fkey")

    alter table(:activities) do
      modify :project_id,
             references(:projects,
               column: :id,
               name: "activities_project_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :group_id,
             references(:groups,
               column: :id,
               name: "activities_group_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:activities, [:organisation_id, :slug, :group_id],
             name: "activities_unique_slug_index"
           )

    create unique_index(:activities, [:organisation_id, :color_code, :group_id],
             name: "activities_unique_color_code_position_index"
           )

    alter table(:activities) do
      remove :organisation_id
    end

    drop_if_exists unique_index(:group_memberships, [:organisation_id, :group_id, :user_id],
                     name: "group_memberships_unique_group_membership_index"
                   )

    drop constraint(:group_memberships, "group_memberships_organisation_id_fkey")

    drop constraint(:group_memberships, "group_memberships_group_id_fkey")

    alter table(:group_memberships) do
      modify :group_id,
             references(:groups,
               column: :id,
               name: "group_memberships_group_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:group_memberships, [:organisation_id, :group_id, :user_id],
             name: "group_memberships_unique_group_membership_index"
           )

    alter table(:group_memberships) do
      remove :organisation_id
    end

    drop_if_exists unique_index(:groups, [:organisation_id, :slug],
                     name: "groups_unique_slug_per_organisation_index"
                   )

    create unique_index(:groups, [:organisation_id, :slug, :organisation_id],
             name: "groups_unique_slug_per_organisation_index"
           )

    alter table(:groups) do
      modify :organisation_id, :uuid, null: true
    end

    drop constraint(:invitation_groups, "invitation_groups_organisation_id_fkey")

    drop constraint(:invitation_groups, "invitation_groups_invitation_id_fkey")

    drop constraint(:invitation_groups, "invitation_groups_group_id_fkey")

    alter table(:invitation_groups) do
      modify :group_id,
             references(:groups,
               column: :id,
               name: "invitation_groups_group_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :invitation_id,
             references(:invitations,
               column: :id,
               name: "invitation_groups_invitation_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      remove :organisation_id
    end

    drop constraint(:invitations, "invitations_organisation_id_fkey")

    alter table(:invitations) do
      modify :organisation_id,
             references(:organisations,
               column: :id,
               name: "invitations_organisation_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    drop constraint(:log_entries, "log_entries_activity_id_fkey")

    alter table(:log_entries) do
      modify :activity_id,
             references(:activities,
               column: :id,
               name: "log_entries_activity_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    drop_if_exists unique_index(:projects, [:organisation_id, :position],
                     name: "projects_unique_position_index"
                   )

    drop_if_exists unique_index(:projects, [:organisation_id, :name],
                     name: "projects_unique_name_index"
                   )

    create unique_index(:projects, [:organisation_id, :position, :organisation_id],
             name: "projects_unique_position_index"
           )

    create unique_index(:projects, [:organisation_id, :name, :organisation_id],
             name: "projects_unique_name_index"
           )

    drop constraint(:tokens, "tokens_organisation_id_fkey")

    alter table(:tokens) do
      remove :organisation_id
    end
  end
end
