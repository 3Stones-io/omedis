defmodule Omedis.Repo.Migrations.CreateActivities do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:log_entries) do
      add :activity_id, :uuid
    end

    create table(:activities, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false

      add :group_id,
          references(:groups,
            column: :id,
            name: "activities_group_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :project_id,
          references(:projects,
            column: :id,
            name: "activities_project_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :color_code, :text
      add :is_default, :boolean, null: false, default: false
      add :position, :bigint
      add :slug, :text, null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    alter table(:log_entries) do
      modify :activity_id,
             references(:activities,
               column: :id,
               name: "log_entries_activity_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:activities, [:color_code, :group_id],
             name: "activities_unique_color_code_position_index"
           )

    create unique_index(:activities, [:position, :group_id],
             name: "activities_unique_position_index"
           )

    create unique_index(:activities, [:slug, :group_id], name: "activities_unique_slug_index")
  end

  def down do
    drop_if_exists unique_index(:activities, [:slug, :group_id],
                     name: "activities_unique_slug_index"
                   )

    drop_if_exists unique_index(:activities, [:position, :group_id],
                     name: "activities_unique_position_index"
                   )

    drop_if_exists unique_index(:activities, [:color_code, :group_id],
                     name: "activities_unique_color_code_position_index"
                   )

    drop constraint(:activities, "activities_group_id_fkey")

    drop constraint(:activities, "activities_project_id_fkey")

    alter table(:activities) do
      remove :updated_at
      remove :created_at
      remove :slug
      remove :position
      remove :is_default
      remove :color_code
      remove :project_id
      remove :group_id
      remove :name
    end

    drop constraint(:log_entries, "log_entries_activity_id_fkey")

    alter table(:log_entries) do
      modify :activity_id, :uuid
    end

    drop table(:activities)

    alter table(:log_entries) do
      remove :activity_id
    end
  end
end
