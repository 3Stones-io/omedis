defmodule Omedis.Repo.Migrations.AddChatResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:chat_rooms, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false

      add :organisation_id,
          references(:organisations,
            column: :id,
            name: "chat_rooms_organisation_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :archived_at, :utc_datetime_usec
    end

    create index(:chat_rooms, [:updated_at])

    create index(:chat_rooms, [:created_at])

    create index(:chat_rooms, [:organisation_id])

    create table(:chat_room_members, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :chat_room_id,
          references(:chat_rooms,
            column: :id,
            name: "chat_room_members_chat_room_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "chat_room_members_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :archived_at, :utc_datetime_usec
    end

    create index(:chat_room_members, [:updated_at])

    create index(:chat_room_members, [:created_at])

    create index(:chat_room_members, [:chat_room_id, :user_id])

    create index(:chat_room_members, [:user_id])

    create index(:chat_room_members, [:chat_room_id])

    create table(:chat_messages_views, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :chat_message_id, :uuid, null: false
      add :user_id, :uuid, null: false
      add :viewed_at, :utc_datetime, null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :archived_at, :utc_datetime_usec
    end

    create index(:chat_messages_views, [:viewed_at])

    create index(:chat_messages_views, [:updated_at])

    create index(:chat_messages_views, [:created_at])

    create index(:chat_messages_views, [:chat_message_id, :user_id])

    create index(:chat_messages_views, [:user_id])

    create index(:chat_messages_views, [:chat_message_id])

    create table(:chat_messages, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:chat_messages_views) do
      modify :chat_message_id,
             references(:chat_messages,
               column: :id,
               name: "chat_messages_views_chat_message_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :user_id,
             references(:users,
               column: :id,
               name: "chat_messages_views_user_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:chat_messages) do
      add :message, :text, null: false
      add :is_priority, :boolean, null: false

      add :chat_room_id,
          references(:chat_rooms,
            column: :id,
            name: "chat_messages_chat_room_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "chat_messages_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :reply_to_message_id, :uuid, null: false
      add :deleted_at, :utc_datetime_usec

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :archived_at, :utc_datetime_usec
    end

    create index(:chat_messages, [:updated_at])

    create index(:chat_messages, [:created_at])

    create index(:chat_messages, [:chat_room_id, :reply_to_message_id])

    create index(:chat_messages, [:chat_room_id, :user_id])

    create index(:chat_messages, [:reply_to_message_id])

    create index(:chat_messages, [:user_id])

    create index(:chat_messages, [:chat_room_id])
  end

  def down do
    drop constraint(:chat_messages, "chat_messages_chat_room_id_fkey")

    drop constraint(:chat_messages, "chat_messages_user_id_fkey")

    drop_if_exists index(:chat_messages, [:chat_room_id])

    drop_if_exists index(:chat_messages, [:user_id])

    drop_if_exists index(:chat_messages, [:reply_to_message_id])

    drop_if_exists index(:chat_messages, [:chat_room_id, :user_id])

    drop_if_exists index(:chat_messages, [:chat_room_id, :reply_to_message_id])

    drop_if_exists index(:chat_messages, [:created_at])

    drop_if_exists index(:chat_messages, [:updated_at])

    alter table(:chat_messages) do
      remove :archived_at
      remove :updated_at
      remove :created_at
      remove :deleted_at
      remove :reply_to_message_id
      remove :user_id
      remove :chat_room_id
      remove :is_priority
      remove :message
    end

    drop constraint(:chat_messages_views, "chat_messages_views_chat_message_id_fkey")

    drop constraint(:chat_messages_views, "chat_messages_views_user_id_fkey")

    alter table(:chat_messages_views) do
      modify :user_id, :uuid
      modify :chat_message_id, :uuid
    end

    drop table(:chat_messages)

    drop_if_exists index(:chat_messages_views, [:chat_message_id])

    drop_if_exists index(:chat_messages_views, [:user_id])

    drop_if_exists index(:chat_messages_views, [:chat_message_id, :user_id])

    drop_if_exists index(:chat_messages_views, [:created_at])

    drop_if_exists index(:chat_messages_views, [:updated_at])

    drop_if_exists index(:chat_messages_views, [:viewed_at])

    drop table(:chat_messages_views)

    drop constraint(:chat_room_members, "chat_room_members_chat_room_id_fkey")

    drop constraint(:chat_room_members, "chat_room_members_user_id_fkey")

    drop_if_exists index(:chat_room_members, [:chat_room_id])

    drop_if_exists index(:chat_room_members, [:user_id])

    drop_if_exists index(:chat_room_members, [:chat_room_id, :user_id])

    drop_if_exists index(:chat_room_members, [:created_at])

    drop_if_exists index(:chat_room_members, [:updated_at])

    drop table(:chat_room_members)

    drop constraint(:chat_rooms, "chat_rooms_organisation_id_fkey")

    drop_if_exists index(:chat_rooms, [:organisation_id])

    drop_if_exists index(:chat_rooms, [:created_at])

    drop_if_exists index(:chat_rooms, [:updated_at])

    drop table(:chat_rooms)
  end
end
