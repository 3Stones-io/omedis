name: CI & CD

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-20.04
    name: OTP ${{ matrix.otp }} / Elixir ${{ matrix.elixir }}

    env:
      MIX_ENV: test
      PGHOST: localhost
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: omedis_test

    strategy:
      matrix:
        otp: ["26.2.5.2"]
        elixir: ["1.17.2"]

    services:
      db:
        image: postgres:13-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: omedis_test
        ports: ["5432:5432"]

    steps:
      - uses: actions/checkout@v4

      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.otp }}
          elixir-version: ${{ matrix.elixir }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            _build
            deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Compile
        run: mix compile --warnings-as-errors

      - name: Check formatting
        run: mix format --check-formatted

      - name: Check for changes in gettext files
        run: make check-gettext

      - name: Check migrations
        run: mix ash_postgres.generate_migrations --check

      - name: Check resource snapshots
        run: mix ash_postgres.squash_snapshots --check

      - name: Run tests
        env:
          CI: true
          DISABLE_ML_FEATURES: true
        run: mix test --cover --warnings-as-errors

      - name: Run Credo
        run: mix credo --strict

  deploy:
    name: Deploy
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    env:
      DOCKER_BUILDKIT: 1
      SERVER_ADDR: "188.34.183.100"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.0

      - name: Set up Docker Buildx for cache
        uses: docker/setup-buildx-action@v3

      - name: Set up SSH connection
        run: |
          mkdir -p ~/.ssh && echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa
          ssh-keyscan $SERVER_ADDR >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install Kamal
        run: gem install kamal

      - name: Set up environment variables
        run: |
          cat > .env.prod << EOL
          DATABASE_URL=postgres://postgres:${{ secrets.POSTGRES_PASSWORD }}@omedis-db:5432/omedis
          KAMAL_REGISTRY_PASSWORD=${{ secrets.KAMAL_REGISTRY_PASSWORD }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }}
          EOL

      - name: Deploy with Kamal
        env:
          DOCKER_BUILDKIT: 1
          GIT_SHA: ${{ github.sha }}
        run: |
          kamal deploy
